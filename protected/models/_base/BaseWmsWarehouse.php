<?php

/**
 * This is the model base class for the table "wms_warehouse".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "WmsWarehouse".
 *
 * Columns in table "wms_warehouse" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $name
 * @property string $wh_code
 * @property integer $company_id
 * @property integer $create_uid
 * @property string $create_date
 * @property integer $write_uid
 * @property string $write_date
 * @property integer $active
 *
 */
abstract class BaseWmsWarehouse extends GxActiveRecord {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'wms_warehouse';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'WmsWarehouse|WmsWarehouses', $n);
    }

    public static function representingColumn() {
        return 'name';
    }

    public function rules() {
        return array(
            array('name, company_id', 'required'),
            array('company_id','checkCompany'),
            array('company_id, create_uid, write_uid, active', 'numerical', 'integerOnly' => true),
            array('wh_code', 'safe'),
            array('wh_code, active', 'default', 'setOnEmpty' => true, 'value' => null),
            array('write_uid', 'default',
                'value' => Yii::app()->user->getId(),
                'setOnEmpty' => false, 'on' => 'update'),
            array('create_uid,write_uid', 'default',
                'value' => Yii::app()->user->getId(),
                'setOnEmpty' => false, 'on' => 'insert'),
            array('write_date', 'default',
                'value' => new CDbExpression('NOW()'),
                'setOnEmpty' => false, 'on' => 'update'),
            array('create_date,write_date', 'default',
                'value' => new CDbExpression('NOW()'),
                'setOnEmpty' => false, 'on' => 'insert'),
            array('id, name, wh_code, company_id, create_uid, create_date, write_uid, write_date, active', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'company' => array(self::BELONGS_TO, 'ResCompany', 'company_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'id'),
            'name' => Yii::t('app', 'name'),
            'wh_code' => Yii::t('app', 'wh_code'),
            'company_id' => Yii::t('app', 'company_id'),
            'create_uid' => Yii::t('app', 'create_uid'),
            'create_date' => Yii::t('app', 'create_date'),
            'write_uid' => Yii::t('app', 'write_uid'),
            'write_date' => Yii::t('app', 'write_date'),
            'active' => Yii::t('app', 'active'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('wh_code', $this->wh_code, true);
        $criteria->compare('company_id', $this->company_id);
        $criteria->compare('create_uid', $this->create_uid);
        $criteria->compare('create_date', $this->create_date, true);
        $criteria->compare('write_uid', $this->write_uid);
        $criteria->compare('write_date', $this->write_date, true);
        $criteria->compare('active', $this->active);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
    
    public function checkCompany($attribute)
    {
        $rec  = ResCompany::model()->findByPk($this->$attribute);
        
        if (!isset($rec))
        {
            $this->addError($attribute, Yii::t('Hint', 'CompNotExist', array(), 'i18n'));
        }
    }

}
