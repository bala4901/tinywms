<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-11 at 16:39:19.
 */
class WmsWarehouseTest extends PHPUnit_Framework_TestCase {

    /**
     * @var WmsWarehouse
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new WmsWarehouse;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers WmsWarehouse::model
     * @todo   Implement testModel().
     */
    public function testModel() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WmsWarehouse::getActives
     * @todo   Implement testGetActives().
     */
    public function testGetActives() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WmsWarehouse::getComboSelect
     * @todo   Implement testGetComboSelect().
     */
    public function testGetComboSelect() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WmsWarehouse::Create
     * @dataProvider provider
     */
    public function testCreate($name, $wh_code, $company_id, $active) {
        // insert a comment in pending status
        $identity = new UserIdentity('test', 'admin');
        $identity->authenticate();
        $mockSession = $this->getMock('CHttpSession', array('regenerateID'));
        Yii::app()->setComponent('session', $mockSession);
        Yii::app()->user->login($identity);

        $warehouse = new WmsWarehouse;

        $params = array(
            'name' => $name,
            'wh_code' => $wh_code,
            'company_id' => $company_id,
            '$active' => $active);

        $mess = $warehouse->Create($params);
        
        if ($mess['success']) {
           
            // verify the comment is in pending status
            $warehouse1 = WmsWarehouse::model()->findByPk($mess['id']);
            $this->assertTrue($warehouse1 instanceof WmsWarehouse);
            //$this->assertEquals('Warehouse 1', $warehouse1->write_date);
            $this->assertEquals(1, $warehouse1->active);
            $this->assertEquals(Yii::app()->user->getId(), $warehouse1->create_uid);
            $this->assertEquals(Yii::app()->user->getId(), $warehouse1->write_uid);
            $this->assertEquals($name, $warehouse1->name);
            $this->assertEquals($company_id, $warehouse1->company_id);
            $this->assertEquals($wh_code, $warehouse1->wh_code);
        } else {
//            print_r('---START---[' . $name . ']');
//            print_r($mess['message']);
//            print_r('---END---[' . $name . ']\n');
        }
    }

    public function provider() {
        return array(
            array('Warehouse 1', 'W012', 11, 1),
            array('Warehouse 2', 'W013', 12, 1),
            array('Warehouse 3', 'W014', 11, 1),
            array('', 'W015', 12, 1),
            array('', '', 20, 1),
            array('Failes', 'W015', 20, 1),
        );
    }

    /**
     * @covers WmsWarehouse::Write
     * @dataProvider updateProvider
     */
    public function testWrite($id, $name, $wh_code, $company_id, $active) {
        // insert a comment in pending status
        $identity = new UserIdentity('john', 'admin');
        $identity->authenticate();
        $mockSession = $this->getMock('CHttpSession', array('regenerateID'));
        Yii::app()->setComponent('session', $mockSession);
        Yii::app()->user->login($identity);


        $model = WmsWarehouse::model()->findByPk($id);
        $model2 = WmsWarehouse::model()->findByPk($id);
        $this->assertTrue($model instanceof WmsWarehouse);
        
        $params = array(
            'name' => $name,
            'wh_code' => $wh_code,
            'company_id' => $company_id,
            '$active' => $active);

        $mess = $model->Write($params);

        if ($mess['success']) {
            // verify the comment is in pending status
            $warehouse1 = WmsWarehouse::model()->findByPk($id);
            $this->assertTrue($warehouse1 instanceof WmsWarehouse);
            //$this->assertEquals('Warehouse 1', $warehouse1->write_date);
            $this->assertEquals($active, $warehouse1->active);
            $this->assertEquals(1, $warehouse1->create_uid);
            $this->assertEquals(Yii::app()->user->getId(), $warehouse1->write_uid);
            $this->assertEquals($name, $warehouse1->name);
            $this->assertEquals($company_id, $warehouse1->company_id);
            $this->assertEquals($wh_code, $warehouse1->wh_code);
        } else {
            print_r('---START---[' . $id . ']');
            print_r($mess['message']);
            print_r('---START---[' . $id . ']\n');
        }
    }

    public function updateProvider() {
        return array(
            array(1,'Warehouse 1', 'W001', 11, 1), //OK
            array(2,'Warehouse 2', 'W002', 12, 1),
            array(3,'Warehouse 3', 'W003', 11, 1),
            array(4,'Warehouse 4', 'W004', 12, 1),
            array(5,'Warehouse 5', 'W005', 20, 1),
            array(6, '', 'W006', 11, 1),
            array(7, 'Warehouse 7', '', 12, 1),
            array(8, 'Warehouse 8', 'W008', 20, 0),
        );
    }
    
    /**
     * @covers WmsWarehouse::Delete
     * @dataProvider deleteProvider
     */
    public function testDeactive($id, $user) {
        // insert a comment in pending status
        $identity = new UserIdentity($user, 'admin');
        $identity->authenticate();
        $mockSession = $this->getMock('CHttpSession', array('regenerateID'));
        Yii::app()->setComponent('session', $mockSession);
        Yii::app()->user->login($identity);


        $model = WmsWarehouse::model()->findByPk($id);
        
        $this->assertTrue($model instanceof WmsWarehouse);
        


        $mess = $model->Deactive();

        if ($mess['success']) {
            // verify the comment is in pending status
            $warehouse1 = WmsWarehouse::model()->findByPk($id);
            $this->assertTrue($warehouse1 instanceof WmsWarehouse);
            //$this->assertEquals('Warehouse 1', $warehouse1->write_date);
            $this->assertEquals(0, $warehouse1->active);
            $this->assertEquals(1, $warehouse1->create_uid);
            $this->assertEquals(Yii::app()->user->getId(), $warehouse1->write_uid);
            $this->assertEquals($model->name, $warehouse1->name);
            $this->assertEquals($model->company_id, $warehouse1->company_id);
            $this->assertEquals($model->wh_code, $warehouse1->wh_code);
        } else {
            print_r('---START---[' . $id . ']');
            print_r($mess['message']);
            print_r('---START---[' . $id . ']\n');
        }
    }
    
        public function deleteProvider() {
        return array(
            array(9,'john'), //OK
            array(10,'susan' ), //OK
            array(11,'test'), //OK


        );
    }

}
